{"version":3,"file":"static/js/81.aa89f8e0.chunk.js","mappings":"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","sources":["Components/TaskOne/ColumnVisibilityToggle.jsx","Components/TaskOne/ExportButtons.jsx","Components/TaskOne/DataTable.jsx","Components/TaskOne/PostList.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst ColumnVisibilityToggle = ({ columns, toggleColumn }) => {\r\n  return (\r\n    <div style={{ marginBottom: '1rem' }}>\r\n      <label><strong>Toggle Columns:</strong></label>\r\n      <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap', marginTop: '5px' }}>\r\n        {columns.map((col) => (\r\n          col.key !== 'actions' && (\r\n            <label key={col.key}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={col.visible}\r\n                onChange={() => toggleColumn(col.key)}\r\n                disabled={columns.filter(c => c.visible).length === 1 && col.visible}\r\n              />\r\n              {col.label}\r\n            </label>\r\n          )\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColumnVisibilityToggle;\r\n","import jsPDF from 'jspdf';\r\nimport React from 'react';\r\nimport 'jspdf-autotable';\r\nimport autoTable from 'jspdf-autotable';\r\nimport { FaFileExcel, FaRegFilePdf } from 'react-icons/fa';\r\nimport { LuFileJson } from 'react-icons/lu';\r\nconst exportToCSV = (data, columns, fileName = 'export.csv') => {\r\n  const visibleCols = columns.filter((col) => col.visible && col.exportable !== false);\r\n  const headers = visibleCols.map((col) => col.label);\r\n  const rows = data.map((row) =>\r\n    visibleCols.map((col) => {\r\n      const value = row[col.key];\r\n      return col.format ? col.format(value) : value;\r\n    })\r\n  );\r\n\r\n  let csvContent =\r\n    [headers.join(','), ...rows.map((r) => r.join(','))].join('\\n');\r\n\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(blob);\r\n  link.download = fileName;\r\n  link.click();\r\n};\r\n\r\n\r\nconst exportToJSON = (data, columns, fileName = 'export.json') => {\r\n  const visibleCols = columns.filter((col) => col.visible && col.exportable !== false);\r\n  const filteredData = data.map((row) => {\r\n    const newObj = {};\r\n    visibleCols.forEach((col) => {\r\n      newObj[col.label] = col.format ? col.format(row[col.key]) : row[col.key];\r\n    });\r\n    return newObj;\r\n  });\r\n\r\n  const blob = new Blob([JSON.stringify(filteredData, null, 2)], {\r\n    type: 'application/json',\r\n  });\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(blob);\r\n  link.download = fileName;\r\n  link.click();\r\n};\r\n const exportToPDF = (data, columns) => {\r\n    const doc = new jsPDF();\r\n    const visibleColumns = columns.filter(col => col.exportable !== false && col.visible !== false);\r\n\r\n    const tableColumn = visibleColumns.map(col => col.label);\r\n    const tableRows = data.map(row =>\r\n      visibleColumns.map(col => row[col.key])\r\n    );\r\n\r\n   autoTable(doc, {\r\n    head: [tableColumn],\r\n    body: tableRows,\r\n    startY: 20,\r\n    styles: {\r\n      fontSize: 10,\r\n    },\r\n    headStyles: {\r\n      fillColor: [59, 130, 246], \r\n    },\r\n  });\r\n\r\n  doc.save('table_data.pdf');\r\n  };\r\n\r\nconst ExportButtons = ({ data, columns }) => (\r\n  <div style={{ marginBottom: '1rem' }}>\r\n    <button onClick={() => exportToCSV(data, columns)}>Export CSV   <FaFileExcel style={{color:\"green\"}}/></button>\r\n    <button onClick={() => exportToJSON(data, columns)}>Export JSON <LuFileJson/></button>\r\n    <button onClick={()=>exportToPDF(data,columns)}>Export PDF  <FaRegFilePdf  style={{color:\"red\"}}/></button>\r\n  </div>\r\n);\r\n\r\nexport default ExportButtons;\r\n","import React, { useState, useMemo, useEffect } from 'react';\r\nimport ColumnVisibilityToggle from './ColumnVisibilityToggle';\r\nimport ExportButtons from './ExportButtons';\r\n\r\n\r\n\r\nconst DataTable = ({ columns, data = [], isLoading = false, error = null,toggleColumn ,title}) => {\r\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });\r\n  const [filterText, setFilterText] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(10);\r\n\r\n  const visibleColumns = useMemo(() => columns.filter(col => col.visible !== false), [columns]);\r\n\r\n  const sortedData = useMemo(() => {\r\n    if (!sortConfig.key) return data;\r\n    const sorted = [...data].sort((a, b) => {\r\n      const aValue = a[sortConfig.key];\r\n      const bValue = b[sortConfig.key];\r\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n        return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\r\n      }\r\n      return sortConfig.direction === 'asc'\r\n        ? String(aValue).localeCompare(String(bValue))\r\n        : String(bValue).localeCompare(String(aValue));\r\n    });\r\n    return sorted;\r\n  }, [data, sortConfig]);\r\n\r\n  const filteredData = useMemo(() => {\r\n    return sortedData.filter(row =>\r\n      visibleColumns.some(col =>\r\n        String(row[col.key]).toLowerCase().includes(filterText.toLowerCase())\r\n      )\r\n    );\r\n  }, [sortedData, filterText, visibleColumns]);\r\n\r\n  const paginatedData = useMemo(() => {\r\n    const start = (currentPage - 1) * pageSize;\r\n    return filteredData.slice(start, start + pageSize);\r\n  }, [filteredData, currentPage, pageSize]);\r\n\r\n  const totalPages = Math.ceil(filteredData.length / pageSize);\r\n\r\n  const requestSort = key => {\r\n    let direction = 'asc';\r\n    if (sortConfig.key === key && sortConfig.direction === 'asc') {\r\n      direction = 'desc';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  if (isLoading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n  if (!data.length) return <p>No data available</p>;\r\n\r\n  return (\r\n    <>\r\n     <div className='innerheader'>\r\n <h1>{title}</h1>\r\n        </div>\r\n      <div className=\"table-toolbar\">\r\n\r\n  <div className=\"toolbar-section\">\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      value={filterText}\r\n      onChange={e => setFilterText(e.target.value)}\r\n      className=\"search-input\"\r\n    />\r\n  </div>\r\n\r\n <div className=\"toolbar-section column-toggle\">\r\n    <ColumnVisibilityToggle columns={columns} toggleColumn={toggleColumn} />\r\n  </div>\r\n  <div className=\"toolbar-section export-buttons\">\r\n    <ExportButtons data={data} columns={columns} />\r\n  </div>\r\n\r\n \r\n \r\n</div>\r\n\r\n<div className=\"datatable\">\r\n    \r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {visibleColumns.map(col => (\r\n              <th key={col.key} onClick={() => col.sortable && requestSort(col.key)}>\r\n                {col.label}\r\n                {sortConfig.key === col.key && (sortConfig.direction === 'asc' ? ' ▲' : ' ▼')}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paginatedData.map((row, i) => (\r\n            <tr key={i}>\r\n              {visibleColumns.map(col => (\r\n                <td key={col.key}>\r\n                  {col.render ? col.render(row) : col.format ? col.format(row[col.key]) : row[col.key]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n <nav className=\"pagination-container\">\r\n  <ul className=\"pagination\">\r\n    <li className=\"page-item\">\r\n      <button\r\n        className=\"page-link\"\r\n        onClick={() => setCurrentPage(p => Math.max(p - 1, 1))}\r\n        disabled={currentPage === 1}\r\n      >\r\n        Prev\r\n      </button>\r\n    </li>\r\n\r\n    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\r\n      <li key={page} className={`page-item ${page === currentPage ? 'active' : ''}`}>\r\n        <button className=\"page-link\" onClick={() => setCurrentPage(page)}>\r\n          {page}\r\n        </button>\r\n      </li>\r\n    ))}\r\n\r\n    <li className=\"page-item\">\r\n      <button\r\n        className=\"page-link\"\r\n        onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))}\r\n        disabled={currentPage === totalPages}\r\n      >\r\n        Next\r\n      </button>\r\n    </li>\r\n  </ul>\r\n\r\n  <div className=\"pagination-options\">\r\n    <span>\r\n      Page {currentPage} of {totalPages}\r\n    </span>\r\n    <select onChange={e => setPageSize(Number(e.target.value))} value={pageSize}>\r\n      {[10, 25, 50, 100].map(size => (\r\n        <option key={size} value={size}>\r\n          {size} per page\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n</nav>\r\n\r\n    </div>\r\n    </>\r\n    \r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import React, { useEffect, useState } from 'react';\r\nimport DataTable from './DataTable';\r\nimport axios from 'axios';\r\n\r\nconst intialcolumns = [\r\n  { key: 'id', label: 'ID', sortable: true, visible: true },\r\n  { key: 'title', label: 'Title', sortable: true, visible: true },\r\n  { key: 'body', label: 'Content', sortable: false, visible: true },\r\n  {\r\n    key: 'actions',\r\n    label: 'Actions',\r\n    render: (row) => <button onClick={() => alert(`Post ID: ${row.id}`)} className='btn btn-success btn-sm'>View</button>,\r\n    visible: true,\r\n  },\r\n];\r\n\r\nconst PostsList = () => {\r\n  const [posts, setPosts] = useState([]);\r\n    const [columns, setColumns] = useState(intialcolumns);\r\n  const [loading, setLoading] = useState(true);\r\n  const  [error, setError] = useState(null);\r\n\r\n   useEffect(() => {\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n      setPosts(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n         setPosts([]);\r\n      setError(error.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  fetchPosts();\r\n}, []);\r\n\r\n    const toggleColumn = (key) => {\r\n    setColumns((prevCols) =>\r\n      prevCols.map((col) =>\r\n        col.key === key ? { ...col, visible: !col.visible } : col\r\n      )\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      \r\n      <DataTable columns={columns} data={posts} isLoading={loading} error={error} toggleColumn={toggleColumn} title=\"Posts List\"/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostsList;"],"names":["_ref","columns","toggleColumn","_jsxs","style","marginBottom","children","_jsx","display","gap","flexWrap","marginTop","map","col","key","type","checked","visible","onChange","disabled","filter","c","length","label","data","onClick","fileName","arguments","undefined","visibleCols","exportable","headers","rows","row","value","format","csvContent","join","r","blob","Blob","link","document","createElement","href","URL","createObjectURL","download","click","exportToCSV","FaFileExcel","color","filteredData","newObj","forEach","JSON","stringify","exportToJSON","LuFileJson","exportToPDF","doc","jsPDF","visibleColumns","tableColumn","tableRows","autoTable","head","body","startY","styles","fontSize","headStyles","fillColor","save","FaRegFilePdf","isLoading","error","title","sortConfig","setSortConfig","useState","direction","filterText","setFilterText","currentPage","setCurrentPage","pageSize","setPageSize","useMemo","sortedData","sort","a","b","aValue","bValue","String","localeCompare","some","toLowerCase","includes","paginatedData","start","slice","totalPages","Math","ceil","_Fragment","className","placeholder","e","target","ColumnVisibilityToggle","ExportButtons","sortable","requestSort","i","render","p","max","Array","from","_","page","concat","min","Number","size","intialcolumns","alert","id","PostsList","posts","setPosts","setColumns","loading","setLoading","setError","useEffect","async","response","axios","get","message","fetchPosts","DataTable","prevCols","_objectSpread"],"sourceRoot":""}